
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nacho
 */
public class GestorGUI extends javax.swing.JFrame {
       public String a[];
       public String auxString;
       public  Tabla auxTable,auxTable2;
       public String nombreTabla1,nombreTabla2;
        /**
     * Creates new form GestorGUI
     */
    public GestorGUI() {
        initComponents();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaQuery = new javax.swing.JTextArea();
        labelQuery = new javax.swing.JLabel();
        labelResult = new javax.swing.JLabel();
        buttonEjecutar = new javax.swing.JButton();
        tableScroll = new javax.swing.JScrollPane();
        tablesPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableResultQuery1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableResultQuery2 = new javax.swing.JTable();
        labelFinal = new javax.swing.JLabel();
        labelTabla1 = new javax.swing.JLabel();
        labelFiltrado2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableResultQuery4 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableResultQuery5 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableResultQuery3 = new javax.swing.JTable();
        labelTabla2 = new javax.swing.JLabel();
        labelFiltrado = new javax.swing.JLabel();
        buttonClean = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 51, 102));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("GESTOR BD"); // NOI18N
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        textAreaQuery.setColumns(20);
        textAreaQuery.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        textAreaQuery.setRows(5);
        jScrollPane1.setViewportView(textAreaQuery);

        labelQuery.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        labelQuery.setForeground(new java.awt.Color(255, 255, 255));
        labelQuery.setText("QUERY");

        labelResult.setBackground(new java.awt.Color(204, 204, 255));
        labelResult.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        labelResult.setForeground(new java.awt.Color(255, 255, 255));
        labelResult.setText("RESULTADO DEL QUERY");

        buttonEjecutar.setBackground(new java.awt.Color(0, 153, 102));
        buttonEjecutar.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        buttonEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/play(2).png"))); // NOI18N
        buttonEjecutar.setBorder(null);
        buttonEjecutar.setBorderPainted(false);
        buttonEjecutar.setContentAreaFilled(false);
        buttonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEjecutarActionPerformed(evt);
            }
        });

        tableScroll.setAutoscrolls(true);

        tablesPanel.setBackground(new java.awt.Color(102, 138, 200));
        tablesPanel.setAutoscrolls(true);

        tableResultQuery1.setAutoCreateRowSorter(true);
        tableResultQuery1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableResultQuery1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableResultQuery1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableResultQuery1.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jScrollPane3.setViewportView(tableResultQuery1);

        tableResultQuery2.setAutoCreateRowSorter(true);
        tableResultQuery2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableResultQuery2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableResultQuery2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableResultQuery2.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jScrollPane2.setViewportView(tableResultQuery2);

        labelFinal.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelFinal.setForeground(new java.awt.Color(255, 255, 255));
        labelFinal.setText("PROYECCION");

        labelTabla1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelTabla1.setForeground(new java.awt.Color(255, 255, 255));
        labelTabla1.setText("TABLA");

        labelFiltrado2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelFiltrado2.setForeground(new java.awt.Color(255, 255, 255));
        labelFiltrado2.setText("PRODUCTO CARTESIANO");

        tableResultQuery4.setAutoCreateRowSorter(true);
        tableResultQuery4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableResultQuery4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableResultQuery4.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableResultQuery4.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jScrollPane5.setViewportView(tableResultQuery4);

        tableResultQuery5.setAutoCreateRowSorter(true);
        tableResultQuery5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableResultQuery5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableResultQuery5.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableResultQuery5.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jScrollPane6.setViewportView(tableResultQuery5);

        tableResultQuery3.setAutoCreateRowSorter(true);
        tableResultQuery3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableResultQuery3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableResultQuery3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableResultQuery3.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jScrollPane7.setViewportView(tableResultQuery3);

        labelTabla2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelTabla2.setForeground(new java.awt.Color(255, 255, 255));
        labelTabla2.setText("TABLA");

        labelFiltrado.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelFiltrado.setForeground(new java.awt.Color(255, 255, 255));
        labelFiltrado.setText("FILTRADO");

        javax.swing.GroupLayout tablesPanelLayout = new javax.swing.GroupLayout(tablesPanel);
        tablesPanel.setLayout(tablesPanelLayout);
        tablesPanelLayout.setHorizontalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablesPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelTabla2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(labelTabla1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFiltrado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFiltrado2))
                .addGap(6, 6, 6)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        tablesPanelLayout.setVerticalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTabla1)
                    .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelFinal)
                        .addComponent(labelFiltrado)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTabla2)
                    .addComponent(labelFiltrado2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        tableScroll.setViewportView(tablesPanel);

        buttonClean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/clean.png"))); // NOI18N
        buttonClean.setBorderPainted(false);
        buttonClean.setContentAreaFilled(false);
        buttonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCleanActionPerformed(evt);
            }
        });

        buttonExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit.png"))); // NOI18N
        buttonExit.setBorderPainted(false);
        buttonExit.setContentAreaFilled(false);
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(labelQuery))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1090, 1090, 1090)
                                .addComponent(buttonClean, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(950, 950, 950)
                                .addComponent(buttonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1220, 1220, 1220)
                                .addComponent(buttonExit))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(labelResult))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tableScroll, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(labelQuery)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(buttonClean, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(buttonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(buttonExit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(labelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCleanActionPerformed

        clean();
        this.textAreaQuery.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCleanActionPerformed

    private void buttonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEjecutarActionPerformed

        String query = this.textAreaQuery.getText();
        String lineas[],palabras[],nombreColumnas[];
        clean();
        lineas=query.split("\n");

        try {
            queryLine(lineas);

        } catch (IOException ex) {
            Logger.getLogger(GestorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonEjecutarActionPerformed

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonExitActionPerformed

    public void printAllColumns(Tabla x,DefaultTableModel tm,JTable t){
        for(int j = 0; j<x.columnas.size();j++){
           tm.addColumn(x.columnas.get(j).nombre,x.columnas.get(j).instancias.toArray());
        }
        for(int j = 0; j<x.columnas.size();j++){
                t.getColumnModel().getColumn(j).setPreferredWidth(100);
         }
    }
    
    public Tabla tableFill(String nombre) throws FileNotFoundException, IOException{
        FileReader auxf;
        BufferedReader auxb;
        String auxString;
        Tabla X;
        
                     auxf = new FileReader("tablas/" + nombre);
                     auxb = new BufferedReader(auxf);
                     
                     a=auxb.readLine().split(",");
        
                     X = new Tabla(a[0],a);
                     auxString = auxb.readLine();
                     
                    do{
                        X.agreggate(auxString);
                        }while((auxString=auxb.readLine()) != null);
        return X;
        
    }
    
    public void equalsColumn(String x, String y,Tabla t){
        int indexX=-1,indexY=-1;    
        String tabla1,tabla2;
        String Columna1,Columna2;
        if(x.split("\\.").length == 2){
            tabla1 = x.split("\\.")[0].substring(0,1).toUpperCase() + x.split("\\.")[0].substring(1).toLowerCase() ;
            Columna1 = x.split("\\.")[1];
            try{
                tabla2 = y.split("\\.")[0].substring(0,1).toUpperCase() + y.split("\\.")[0].substring(1).toLowerCase() ;
                Columna2 = y.split("\\.")[1];
            }catch(Exception e){
                tabla2 = "";
                Columna2 = y;
            }
            if(tabla2.equals("")){
                for(int i=0;i<this.auxTable.columnas.size();i++){
                    if(this.auxTable.columnas.get(i).nombre.equals(Columna1) && tabla1.equals(nombreTabla1) 
                            && i<(auxTable.columnas.size()-auxTable2.columnas.size()))
                        indexX=i;
                    if(this.auxTable.columnas.get(i).nombre.equals(Columna1) && tabla1.equals(auxTable2.nombre) 
                            && i>=(auxTable.columnas.size()-auxTable2.columnas.size()))
                        indexX=i;
                    }
                     int j=0;
                     for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                        if(!this.auxTable.columnas.get(indexX).instancias.get(i).trim().equals(Columna2.trim())){
                            t.removeFila(i);i--;   
                         }
                       }        
            }else{
                for(int i=0;i<this.auxTable.columnas.size();i++){
                    if(this.auxTable.columnas.get(i).nombre.equals(Columna1) && tabla1.equals(nombreTabla1) 
                            && i<(auxTable.columnas.size()-auxTable2.columnas.size()))
                        indexX=i;
                    if(this.auxTable.columnas.get(i).nombre.equals(Columna1) && tabla2.equals(auxTable2.nombre) 
                            && i>=(auxTable.columnas.size()-auxTable2.columnas.size()))
                        indexY=i;
                }
                for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                    if(!this.auxTable.columnas.get(indexX).instancias.get(i).trim().equals(this.auxTable.columnas.get(indexY).instancias.get(i).trim())){
                        t.removeFila(i);i--;             
                    }
                }  
                
            
            }
            
        
        }else{
        for(int i=0;i<this.auxTable.columnas.size();i++){
            if(this.auxTable.columnas.get(i).nombre.equals(x))
                indexX=i;
            if(this.auxTable.columnas.get(i).nombre.equals(y))
                indexY=i;            
            }
        
        if(indexY==-1){
            int j=0;
            for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                if(!this.auxTable.columnas.get(indexX).instancias.get(i).trim().equals(y.trim())){
                    t.removeFila(i);i--;             
                }
            }        
        }else{
            for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                if(!this.auxTable.columnas.get(indexX).instancias.get(i).trim().equals(this.auxTable.columnas.get(indexY).instancias.get(i).trim())){
                    t.removeFila(i);i--;             
                }
            }   
        } 
      }   
    }
    
    public void menorColumn(String x, String y,Tabla t){
        int indexX=-1,indexY=-1;    
        
        for(int i=0;i<this.auxTable.columnas.size();i++){
            if(this.auxTable.columnas.get(i).nombre.equals(x))
                indexX=i;
            if(this.auxTable.columnas.get(i).nombre.equals(y))
                indexY=i;            
            }
        
        if(indexY==-1){
            int j=0;
            for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                if(!(Integer.parseInt(this.auxTable.columnas.get(indexX).instancias.get(i).trim())<(Integer.parseInt(y.trim())))){
                    t.removeFila(i);i--;             
                }
            }        
        
        }         
    }
     
    public void mayorColumn(String x, String y,Tabla t){
        int indexX=-1,indexY=-1;    
        
        for(int i=0;i<this.auxTable.columnas.size();i++){
            if(this.auxTable.columnas.get(i).nombre.equals(x))
                indexX=i;
            if(this.auxTable.columnas.get(i).nombre.equals(y))
                indexY=i;            
            }
        
        if(indexY==-1){
            int j=0;
            for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                if(!(Integer.parseInt(this.auxTable.columnas.get(indexX).instancias.get(i).trim())>(Integer.parseInt(y.trim())))){
                    t.removeFila(i);i--;             
                }
            }        
        
        }         
    }
    
    public void mayorEqualColumn(String x, String y,Tabla t){
        int indexX=-1,indexY=-1;    
        
        for(int i=0;i<this.auxTable.columnas.size();i++){
            if(this.auxTable.columnas.get(i).nombre.equals(x))
                indexX=i;
            if(this.auxTable.columnas.get(i).nombre.equals(y))
                indexY=i;            
            }
        
        if(indexY==-1){
            int j=0;
            for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                if(!(Integer.parseInt(this.auxTable.columnas.get(indexX).instancias.get(i).trim())>=(Integer.parseInt(y.trim())))){
                    t.removeFila(i);i--;             
                }
            }        
        
        }         
    }
    
    public void menorEqualColumn(String x, String y,Tabla t){
        int indexX=-1,indexY=-1;    
        
        for(int i=0;i<this.auxTable.columnas.size();i++){
            if(this.auxTable.columnas.get(i).nombre.equals(x))
                indexX=i;
            if(this.auxTable.columnas.get(i).nombre.equals(y))
                indexY=i;            
            }
        
        if(indexY==-1){
            int j=0;
            for(int i=0;i<t.columnas.get(0).instancias.size();i++){
                if(!(Integer.parseInt(this.auxTable.columnas.get(indexX).instancias.get(i).trim())<=(Integer.parseInt(y.trim())))){
                    t.removeFila(i);i--;             
                }
            }        
        
        }         
    }
    
    
    public void queryLine(String[] lineas) throws FileNotFoundException, IOException{
        ArrayList <String> nombreTablas = new ArrayList();
        String palabras[],nombreColumnas[]={},nombreArchivo;
        Tabla temporal = new Tabla("Query");
        Tabla intermedia = new Tabla("Tabla dos");
        Tabla producto = new Tabla("Producto Cartesiano");
        Tabla Filtrada = new Tabla("Filtrada");
        String tabla;
        int band=0;
        
        for(int i =0;i<lineas.length;i++){
            palabras=lineas[i].split(" ");
            palabras[0]=palabras[0].substring(0,1).toUpperCase() + palabras[0].substring(1).toLowerCase();
            switch(palabras[0]){
                
                case "Select":{
                    nombreColumnas = palabras[1].split(","); 
                    if(nombreColumnas[0].split("\\.").length > 1)
                        for(int k = 0; k<nombreColumnas.length;k++){
                            tabla = nombreColumnas[k].split("\\.")[0];
                            nombreTablas.add(tabla.substring(0,1).toUpperCase() + tabla.substring(1).toLowerCase());
                            nombreColumnas[k]=nombreColumnas[k].split("\\.")[1];
                        }
                    break;
                }
                
                case "From":{
                    
                    if(palabras.length==2){
                        band=0;
                        nombreArchivo = palabras[1] + ".txt";
                        auxTable = tableFill(nombreArchivo);

                        printAllColumns(auxTable,tablemodel1,tableResultQuery1);
                        if(nombreColumnas[0].equals("*")){
                             for(int k=0;k<auxTable.columnas.size();k++){
                                   temporal.columnas.add(auxTable.columnas.get(k));
                                   }
                        }else{
                            for(int j =0;j<nombreColumnas.length;j++){
                                for(int k=0;k<auxTable.columnas.size();k++){
                                    if(nombreColumnas[j].equals(auxTable.columnas.get(k).nombre)){
                                        temporal.columnas.add(auxTable.columnas.get(k));
                                    }
                                }
                            }
                            if(temporal.columnas.size()<1)//OPTION PANE
                                System.out.println("No hay ninguna columna llamada de esa manera");


                        }
                        intermedia = auxTable;
                        
                        }else{
                            band = 1;
                            nombreArchivo = palabras[1].replace(",", "") + ".txt";
                            auxTable = tableFill(nombreArchivo);
                            printAllColumns(auxTable,tablemodel1,tableResultQuery1);                      
                            
                            nombreArchivo = palabras[2] + ".txt";
                            auxTable2 = tableFill(nombreArchivo);
                            printAllColumns(auxTable2,tablemodel4,tableResultQuery4);
                            
                            for(Columna c : auxTable.columnas){producto.columnas.add(new Columna(c.nombre));}
                            for(Columna c1 : auxTable2.columnas){producto.columnas.add(new Columna(c1.nombre));}
                            //PROYECCION
                            int z;
                            
                            
                            //LLENADO DE PROYECCION CON TABLA 1
                            for( z=0 ;z<auxTable.columnas.size();z++){
                                for(String instx : auxTable.columnas.get(z).instancias){ 
                                    for(String insty : auxTable2.columnas.get(0).instancias)
                                        producto.columnas.get(z).instancias.add(instx);
                                }
                            }
                            //LLENADO DE PROYECCION CON TABLA 2
                            for(;z<producto.columnas.size();z++)
                                for(String instx : auxTable.columnas.get(0).instancias)
                                    producto.columnas.get(z).instancias.addAll(auxTable2.columnas.get(z-auxTable.columnas.size()).instancias);
                            
                            if (nombreColumnas[0].equals("*"))
                                Filtrada = producto;
                            else//FILTRADO DE COLUMNAS
                                for(int w = 0; w < nombreColumnas.length; w++ )
                                    for(Columna c : producto.columnas){ 
                                        if(nombreTablas.get(w).equals(auxTable.nombre) && nombreColumnas[w].equals(c.nombre) 
                                           && producto.columnas.indexOf(c)<auxTable.columnas.size())
                                            Filtrada.columnas.add(c);
                                        else if(nombreTablas.get(w).equals(auxTable2.nombre) && nombreColumnas[w].equals(c.nombre) 
                                                && producto.columnas.indexOf(c)>=auxTable.columnas.size())
                                                Filtrada.columnas.add(c);
                                }
                             printAllColumns(producto,tablemodel5,tableResultQuery5);
                        }
                   
                    break;
                    }
                case "Where":{
                    intermedia = auxTable;
                    
                    switch(palabras[2]){
                        case "=":{
                            if(band==1){
                            nombreTabla1 = auxTable.nombre;
                            auxTable = producto;
                            equalsColumn(palabras[1],palabras[3],producto);
                            
                            }else if(band==0){
                                equalsColumn(palabras[1],palabras[3],intermedia);
                                equalsColumn(palabras[1],palabras[3],temporal);
                                
                            }
                        break;
                        }
                        case "<":{
                            menorColumn(palabras[1],palabras[3],temporal);
                        break;
                        }
                        case ">":{
                            mayorColumn(palabras[1],palabras[3],temporal);
                            break;
                        }
                        case "<=":{
                            menorEqualColumn(palabras[1],palabras[3],temporal);
                            break;
                        }
                        case ">=":{
                            mayorEqualColumn(palabras[1],palabras[3],temporal);
                            break;
                        }
                        default:{
                            System.out.println("Operador no funcional");
                        }
                    }
                    
                    break;
                }
                
                case "Describe":{
                    
                }
            
        
            }
        }
        
         //RESOLVER POSICIONES DE TABLAS DEPENDIENDO DE LOS CASOS
        if(band==0){
        printAllColumns(intermedia,tablemodel2,tableResultQuery2);
        printAllColumns(temporal,tablemodel3,tableResultQuery3);
        this.labelFinal.setText("PROYECCION");
        }else if(band==1){
            printAllColumns(producto,tablemodel2,tableResultQuery2);
            printAllColumns(Filtrada,tablemodel3,tableResultQuery3);
            this.labelFinal.setText("EQUIJOIN");
        }
        
    }
    
    public void clean(){
        this.tableResultQuery1.setModel(tablemodel1 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
        this.tableResultQuery2.setModel(tablemodel2 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
        
        this.tableResultQuery3.setModel(tablemodel3 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
        this.tableResultQuery4.setModel(tablemodel4 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
        this.tableResultQuery5.setModel(tablemodel5 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
        
       
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static DefaultTableModel tablemodel1;
    public static DefaultTableModel tablemodel2;
    public static DefaultTableModel tablemodel3;
    public static DefaultTableModel tablemodel4;
    public static DefaultTableModel tablemodel5;
    public static DefaultTableModel tablemodel6;
    
    
    public static void corre(String QUERY) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestorGUI().setVisible(true);
                GestorGUI.tableResultQuery1.setModel(tablemodel1 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
                GestorGUI.tableResultQuery2.setModel(tablemodel2 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
                GestorGUI.tableResultQuery3.setModel(tablemodel3 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
                GestorGUI.tableResultQuery4.setModel(tablemodel4 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
                GestorGUI.tableResultQuery5.setModel(tablemodel5 = new javax.swing.table.DefaultTableModel(
                                                                    new Object [][] {},new String [] {}));
                GestorGUI.getTextAreaQuery().setText(QUERY);
            }
        });
    }

    public static JTextArea getTextAreaQuery() {
        return textAreaQuery;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClean;
    private javax.swing.JButton buttonEjecutar;
    private javax.swing.JButton buttonExit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel labelFiltrado;
    private javax.swing.JLabel labelFiltrado2;
    private javax.swing.JLabel labelFinal;
    private javax.swing.JLabel labelQuery;
    private javax.swing.JLabel labelResult;
    private javax.swing.JLabel labelTabla1;
    private javax.swing.JLabel labelTabla2;
    public static javax.swing.JTable tableResultQuery1;
    public static javax.swing.JTable tableResultQuery2;
    public static javax.swing.JTable tableResultQuery3;
    public static javax.swing.JTable tableResultQuery4;
    public static javax.swing.JTable tableResultQuery5;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JPanel tablesPanel;
    private static javax.swing.JTextArea textAreaQuery;
    // End of variables declaration//GEN-END:variables
}
